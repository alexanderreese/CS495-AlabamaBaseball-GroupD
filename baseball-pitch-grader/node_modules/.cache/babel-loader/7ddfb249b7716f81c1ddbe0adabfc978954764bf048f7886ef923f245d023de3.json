{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PuertoFreakO\\\\Desktop\\\\CS495\\\\CS495-AlabamaBaseball-GroupD\\\\baseball-pitch-grader\\\\src\\\\components\\\\ExportPDF.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport PDFGraphsPage from './PDFGraphsPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExportPDF = () => {\n  _s();\n  var _location$state2;\n  const location = useLocation();\n  const [groupedData, setGroupedData] = React.useState({});\n  useEffect(() => {\n    var _location$state;\n    if (!((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.tableData)) return;\n\n    // Creating a new copy of tableData\n    const tableDataCopy = location.state.tableData.map(row => [...row, 100]);\n\n    // Group data by the first two columns\n    const grouped = groupByColumns(tableDataCopy);\n    setGroupedData(grouped);\n  }, [(_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.tableData]); // Dependency array includes tableData from location.state\n\n  // Function to group the table data by the first two columns\n  const groupByColumns = data => {\n    const groups = {};\n    data.forEach(row => {\n      // Create a unique key for the group from the first two columns\n      const groupKey = `${row[0]}_${row[1]}`;\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      // Push the entire row (or the part you want to include) to the corresponding group\n      groups[groupKey].push(row);\n    });\n    return groups;\n  };\n  const printDocument = () => {\n    const input = document.getElementById('divToPrint');\n    html2canvas(input, {\n      scale: 1\n    }).then(async canvas => {\n      const imgData = canvas.toDataURL('image/png');\n\n      // Get the canvas dimensions\n      const canvasWidth = canvas.width;\n      const canvasHeight = canvas.height;\n\n      // Convert the canvas dimensions from pixels to mm\n      const pdfWidth = canvasWidth * 0.264583; // 1px = 0.264583 mm\n      const pdfHeight = canvasHeight * 0.264583;\n\n      // Create a PDF with the same dimensions\n      const doc = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: [pdfWidth, pdfHeight]\n      });\n      const graphContainers = document.querySelectorAll('[id^=\"graph-container-\"]');\n      for (let i = 0; i < graphContainers.length; i++) {\n        const canvas = await html2canvas(graphContainers[i]);\n        const imgData = canvas.toDataURL('image/png');\n        if (i > 0) {\n          doc.addPage();\n        }\n        doc.addImage(imgData, 'PNG', 10, 10, pdfWidth, pdfHeight); // Adjust dimensions as needed\n      }\n\n      doc.save('download.pdf');\n    });\n  };\n  const testDocument = async () => {\n    const doc = new jsPDF();\n    const graphContainers = document.querySelectorAll('[id^=\"graph-container-\"]');\n    for (let i = 0; i < graphContainers.length; i++) {\n      const canvas = await html2canvas(graphContainers[i]);\n      const imgData = canvas.toDataURL('image/png');\n      if (i > 0) {\n        doc.addPage();\n      }\n      doc.addImage(imgData, 'PNG', 10, 10, 190, 280); // Adjust dimensions as needed\n    }\n\n    doc.save('graphs.pdf');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: printDocument,\n      children: \"Download PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"divToPrint\",\n      style: {\n        width: '210mm',\n        height: '297mm'\n      },\n      children: /*#__PURE__*/_jsxDEV(PDFGraphsPage, {\n        gData: groupedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(ExportPDF, \"kCsa1Nm0g3VIlyZYA/29zNnceDY=\", false, function () {\n  return [useLocation];\n});\n_c = ExportPDF;\nexport default ExportPDF;\nvar _c;\n$RefreshReg$(_c, \"ExportPDF\");","map":{"version":3,"names":["React","useEffect","useLocation","html2canvas","jsPDF","PDFGraphsPage","jsxDEV","_jsxDEV","ExportPDF","_s","_location$state2","location","groupedData","setGroupedData","useState","_location$state","state","tableData","tableDataCopy","map","row","grouped","groupByColumns","data","groups","forEach","groupKey","push","printDocument","input","document","getElementById","scale","then","canvas","imgData","toDataURL","canvasWidth","width","canvasHeight","height","pdfWidth","pdfHeight","doc","orientation","unit","format","graphContainers","querySelectorAll","i","length","addPage","addImage","save","testDocument","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","style","gData","_c","$RefreshReg$"],"sources":["C:/Users/PuertoFreakO/Desktop/CS495/CS495-AlabamaBaseball-GroupD/baseball-pitch-grader/src/components/ExportPDF.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport PDFGraphsPage from './PDFGraphsPage';\r\n\r\n\r\nconst ExportPDF = () => {\r\n  const location = useLocation();\r\n  const [groupedData, setGroupedData] = React.useState({});\r\n\r\n  useEffect(() => {\r\n    if (!location.state?.tableData) return;\r\n  \r\n    // Creating a new copy of tableData\r\n    const tableDataCopy = location.state.tableData.map(row => [...row, 100]);\r\n  \r\n    // Group data by the first two columns\r\n    const grouped = groupByColumns(tableDataCopy);\r\n    setGroupedData(grouped);\r\n  }, [location.state?.tableData]); // Dependency array includes tableData from location.state\r\n  \r\n\r\n  // Function to group the table data by the first two columns\r\n  const groupByColumns = (data) => {\r\n    const groups = {};\r\n    data.forEach((row) => {\r\n      // Create a unique key for the group from the first two columns\r\n      const groupKey = `${row[0]}_${row[1]}`;\r\n      if (!groups[groupKey]) {\r\n        groups[groupKey] = [];\r\n      }\r\n      // Push the entire row (or the part you want to include) to the corresponding group\r\n      groups[groupKey].push(row);\r\n    });\r\n    return groups;\r\n  };\r\n  \r\n\r\n  const printDocument = () => {\r\n    const input = document.getElementById('divToPrint');\r\n    html2canvas(input, { scale: 1 }).then(async canvas => {\r\n      const imgData = canvas.toDataURL('image/png');\r\n  \r\n      // Get the canvas dimensions\r\n      const canvasWidth = canvas.width;\r\n      const canvasHeight = canvas.height;\r\n  \r\n      // Convert the canvas dimensions from pixels to mm\r\n      const pdfWidth = canvasWidth * 0.264583; // 1px = 0.264583 mm\r\n      const pdfHeight = canvasHeight * 0.264583;\r\n  \r\n      // Create a PDF with the same dimensions\r\n      const doc = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: [pdfWidth, pdfHeight]\r\n      });\r\n  \r\n      const graphContainers = document.querySelectorAll('[id^=\"graph-container-\"]');\r\n\r\n      for (let i = 0; i < graphContainers.length; i++) {\r\n        const canvas = await html2canvas(graphContainers[i]);\r\n        const imgData = canvas.toDataURL('image/png');\r\n\r\n        if (i > 0) {\r\n          doc.addPage();\r\n        }\r\n        doc.addImage(imgData, 'PNG', 10, 10, pdfWidth, pdfHeight); // Adjust dimensions as needed\r\n      }\r\n      doc.save('download.pdf');\r\n    });\r\n  };\r\n\r\n  const testDocument = async () => {\r\n    const doc = new jsPDF();\r\n    const graphContainers = document.querySelectorAll('[id^=\"graph-container-\"]');\r\n\r\n    for (let i = 0; i < graphContainers.length; i++) {\r\n      const canvas = await html2canvas(graphContainers[i]);\r\n      const imgData = canvas.toDataURL('image/png');\r\n\r\n      if (i > 0) {\r\n        doc.addPage();\r\n      }\r\n      doc.addImage(imgData, 'PNG', 10, 10, 190, 280); // Adjust dimensions as needed\r\n    }\r\n\r\n    doc.save('graphs.pdf');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={printDocument}>Download PDF</button>\r\n      <div id=\"divToPrint\" style={{ width: '210mm', height: '297mm' }}>\r\n        <PDFGraphsPage gData={groupedData}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportPDF;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
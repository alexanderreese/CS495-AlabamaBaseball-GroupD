{"ast":null,"code":"import Papa from 'papaparse';\nconst columnNames = ['Pitcher', 'TaggedPitchType', 'PitcherThrows', 'EffectiveVelo', 'InducedVertBreak', 'HorzBreak', 'SpinRate', 'RelHeight', 'Extension', 'VertApprAngle'];\nfunction extractDataFromCSV(file) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(file, {\n      header: true,\n      complete: results => {\n        if (!Array.isArray(results.data)) {\n          reject(new Error(\"Parsed data is not an array\"));\n          return;\n        }\n        const extractedData = results.data.map(row => {\n          return columnNames.map(col => {\n            // Replace 'FastBall' with '4S FastBall'\n            if (row[col] === 'Fastball') {\n              return '4S Fastball';\n            }\n\n            // Check if the value is a number and round it\n            const value = parseFloat(row[col]);\n            if (!isNaN(value)) {\n              return parseFloat(value.toFixed(1)); // Round to one decimal place\n            }\n\n            return row[col]; // Return the original value if not a number\n          });\n        });\n\n        resolve(extractedData);\n      },\n      error: error => {\n        reject(error);\n      }\n    });\n  });\n}\nexport default extractDataFromCSV;","map":{"version":3,"names":["Papa","columnNames","extractDataFromCSV","file","Promise","resolve","reject","parse","header","complete","results","Array","isArray","data","Error","extractedData","map","row","col","value","parseFloat","isNaN","toFixed","error"],"sources":["C:/Users/1luke/Desktop/baseball-pitch-grader/src/components/extractDataFromCSV.js"],"sourcesContent":["import Papa from 'papaparse';\n\nconst columnNames = [\n    'Pitcher',\n    'TaggedPitchType',\n    'PitcherThrows',\n    'EffectiveVelo',\n    'InducedVertBreak',\n    'HorzBreak',\n    'SpinRate',\n    'RelHeight',\n    'Extension',\n    'VertApprAngle',\n];\n\nfunction extractDataFromCSV(file) {\n  return new Promise((resolve, reject) => {\n      Papa.parse(file, {\n          header: true,\n          complete: (results) => {\n              if (!Array.isArray(results.data)) {\n                  reject(new Error(\"Parsed data is not an array\"));\n                  return;\n              }\n\n              const extractedData = results.data.map(row => {\n                return columnNames.map(col => {\n                  // Replace 'FastBall' with '4S FastBall'\n                  if (row[col] === 'Fastball') {\n                      return '4S Fastball';\n                  }\n\n                  // Check if the value is a number and round it\n                  const value = parseFloat(row[col]);\n                  if (!isNaN(value)) {\n                      return parseFloat(value.toFixed(1)); // Round to one decimal place\n                  }\n\n                  return row[col]; // Return the original value if not a number\n                });\n              });\n\n              resolve(extractedData);\n          },\n          error: (error) => {\n              reject(error);\n          }\n      });\n  });\n}\n\nexport default extractDataFromCSV;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,MAAMC,WAAW,GAAG,CAChB,SAAS,EACT,iBAAiB,EACjB,eAAe,EACf,eAAe,EACf,kBAAkB,EAClB,WAAW,EACX,UAAU,EACV,WAAW,EACX,WAAW,EACX,eAAe,CAClB;AAED,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAChC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCN,IAAI,CAACO,KAAK,CAACJ,IAAI,EAAE;MACbK,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAGC,OAAO,IAAK;QACnB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,OAAO,CAACG,IAAI,CAAC,EAAE;UAC9BP,MAAM,CAAC,IAAIQ,KAAK,CAAC,6BAA6B,CAAC,CAAC;UAChD;QACJ;QAEA,MAAMC,aAAa,GAAGL,OAAO,CAACG,IAAI,CAACG,GAAG,CAACC,GAAG,IAAI;UAC5C,OAAOhB,WAAW,CAACe,GAAG,CAACE,GAAG,IAAI;YAC5B;YACA,IAAID,GAAG,CAACC,GAAG,CAAC,KAAK,UAAU,EAAE;cACzB,OAAO,aAAa;YACxB;;YAEA;YACA,MAAMC,KAAK,GAAGC,UAAU,CAACH,GAAG,CAACC,GAAG,CAAC,CAAC;YAClC,IAAI,CAACG,KAAK,CAACF,KAAK,CAAC,EAAE;cACf,OAAOC,UAAU,CAACD,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC;;YAEA,OAAOL,GAAG,CAACC,GAAG,CAAC,CAAC,CAAC;UACnB,CAAC,CAAC;QACJ,CAAC,CAAC;;QAEFb,OAAO,CAACU,aAAa,CAAC;MAC1B,CAAC;MACDQ,KAAK,EAAGA,KAAK,IAAK;QACdjB,MAAM,CAACiB,KAAK,CAAC;MACjB;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,eAAerB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
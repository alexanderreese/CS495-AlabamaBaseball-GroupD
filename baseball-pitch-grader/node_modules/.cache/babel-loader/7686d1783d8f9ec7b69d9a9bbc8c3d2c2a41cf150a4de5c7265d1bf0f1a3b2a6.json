{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PuertoFreakO\\\\Desktop\\\\CS495\\\\CS495-AlabamaBaseball-GroupD\\\\baseball-pitch-grader\\\\src\\\\components\\\\GraphsPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphsPage = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const tableData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.tableData) || [];\n\n  // Assuming we have a series of points (e.g., game numbers) as the x-axis labels\n  const points = tableData.map(data => data.someUniquePointIdentifier).filter((value, index, self) => self.indexOf(value) === index);\n  const columns = ['Velocity', 'Ind. Vert Break', 'Horz Break', 'Spin Rate', 'RelHeight', 'Extension', 'Vert App Angle'];\n  const uniquePitchers = [...new Set(tableData.map(data => data[0]))];\n  const uniquePitches = [...new Set(tableData.map(data => data[1]))];\n  const getDatasetsForPitcherAndPitch = (pitcher, pitch) => {\n    return columns.map((column, colIndex) => {\n      const filteredData = tableData.filter(row => row[0] === pitcher && row[1] === pitch);\n      return {\n        label: column,\n        data: filteredData.map(row => row[colIndex + 3]),\n        // +3 to skip 'Pitcher Name', 'Pitch Type', 'Hand'\n        fill: false,\n        borderColor: `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: uniquePitchers.map(pitcher => uniquePitches.map(pitch => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: `${pitcher} - ${pitch}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: points,\n          // This should be the common points for x-axis\n          datasets: getDatasetsForPitcherAndPitch(pitcher, pitch)\n        },\n        options: {\n          scales: {\n            x: {\n              // Define the x-axis scale here if needed\n            },\n            y: {\n              // Define the y-axis scale here if needed\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, `${pitcher}-${pitch}-${Math.random()}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphsPage, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = GraphsPage;\nexport default GraphsPage;\nvar _c;\n$RefreshReg$(_c, \"GraphsPage\");","map":{"version":3,"names":["React","Line","useLocation","jsxDEV","_jsxDEV","GraphsPage","_s","_location$state","location","tableData","state","points","map","data","someUniquePointIdentifier","filter","value","index","self","indexOf","columns","uniquePitchers","Set","uniquePitches","getDatasetsForPitcherAndPitch","pitcher","pitch","column","colIndex","filteredData","row","label","fill","borderColor","Math","random","children","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","labels","datasets","options","scales","x","y","_c","$RefreshReg$"],"sources":["C:/Users/PuertoFreakO/Desktop/CS495/CS495-AlabamaBaseball-GroupD/baseball-pitch-grader/src/components/GraphsPage.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { useLocation } from 'react-router-dom';\n\nconst GraphsPage = () => {\n  const location = useLocation();\n  const tableData = location.state?.tableData || [];\n  \n  // Assuming we have a series of points (e.g., game numbers) as the x-axis labels\n  const points = tableData.map(data => data.someUniquePointIdentifier).filter((value, index, self) => self.indexOf(value) === index);\n\n  const columns = [\n    'Velocity', \n    'Ind. Vert Break', 'Horz Break', 'Spin Rate', \n    'RelHeight', 'Extension', 'Vert App Angle'\n  ];\n\n  const uniquePitchers = [...new Set(tableData.map(data => data[0]))];\n  const uniquePitches = [...new Set(tableData.map(data => data[1]))];\n\n  const getDatasetsForPitcherAndPitch = (pitcher, pitch) => {\n    return columns.map((column, colIndex) => {\n      const filteredData = tableData.filter(row => row[0] === pitcher && row[1] === pitch);\n      return {\n        label: column,\n        data: filteredData.map(row => row[colIndex + 3]), // +3 to skip 'Pitcher Name', 'Pitch Type', 'Hand'\n        fill: false,\n        borderColor: `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`\n      };\n    });\n  };\n\n  return (\n    <div>\n      {uniquePitchers.map(pitcher => (\n        uniquePitches.map(pitch => (\n          <div key={`${pitcher}-${pitch}-${Math.random()}`} style={{ margin: \"20px 0\" }}>\n            <h3>{`${pitcher} - ${pitch}`}</h3>\n            <Line\n              data={{\n                labels: points, // This should be the common points for x-axis\n                datasets: getDatasetsForPitcherAndPitch(pitcher, pitch)\n              }}\n              options={{\n                scales: {\n                  x: {\n                    // Define the x-axis scale here if needed\n                  },\n                  y: {\n                    // Define the y-axis scale here if needed\n                  }\n                }\n              }}\n            />\n          </div>\n        ))\n      ))}\n    </div>\n  );\n};\n\nexport default GraphsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PuertoFreakO\\\\Desktop\\\\CS495\\\\CS495-AlabamaBaseball-GroupD\\\\baseball-pitch-grader\\\\src\\\\components\\\\GraphsPage.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphsPage = props => {\n  const tableData = props.location.state.tableData;\n  const columns = ['Pitcher Name', 'Pitch Type', 'Hand', 'Velocity', 'Ind. Vert Break', 'Horz Break', 'Spin Rate', 'RelHeight', 'Extension', 'Vert App Angle'];\n\n  // Extract data for graphs\n  const getGraphData = () => {\n    const graphData = {};\n    tableData.forEach(row => {\n      const pitchType = row[1];\n      if (pitchType && !graphData[pitchType]) {\n        graphData[pitchType] = row.slice(3); // Get metrics starting from 'Velocity'\n      }\n    });\n\n    return graphData;\n  };\n  const graphData = getGraphData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(graphData).map(pitchType => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pitchType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: columns.slice(3),\n          datasets: [{\n            label: pitchType,\n            data: graphData[pitchType],\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)]\n    }, pitchType, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_c = GraphsPage;\nexport default GraphsPage;\nvar _c;\n$RefreshReg$(_c, \"GraphsPage\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","GraphsPage","props","tableData","location","state","columns","getGraphData","graphData","forEach","row","pitchType","slice","children","Object","keys","map","fileName","_jsxFileName","lineNumber","columnNumber","data","labels","datasets","label","fill","borderColor","tension","_c","$RefreshReg$"],"sources":["C:/Users/PuertoFreakO/Desktop/CS495/CS495-AlabamaBaseball-GroupD/baseball-pitch-grader/src/components/GraphsPage.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst GraphsPage = (props) => {\n    const tableData = props.location.state.tableData;\n    const columns = [\n        'Pitcher Name', 'Pitch Type', 'Hand', 'Velocity', \n        'Ind. Vert Break', 'Horz Break', 'Spin Rate', \n        'RelHeight', 'Extension', 'Vert App Angle'\n    ];\n\n    // Extract data for graphs\n    const getGraphData = () => {\n        const graphData = {};\n        tableData.forEach(row => {\n            const pitchType = row[1];\n            if (pitchType && !graphData[pitchType]) {\n                graphData[pitchType] = row.slice(3); // Get metrics starting from 'Velocity'\n            }\n        });\n        return graphData;\n    };\n\n    const graphData = getGraphData();\n\n    return (\n        <div>\n            {Object.keys(graphData).map(pitchType => (\n                <div key={pitchType}>\n                    <h2>{pitchType}</h2>\n                    <Line \n                        data={{\n                            labels: columns.slice(3),\n                            datasets: [{\n                                label: pitchType,\n                                data: graphData[pitchType],\n                                fill: false,\n                                borderColor: 'rgb(75, 192, 192)',\n                                tension: 0.1\n                            }]\n                        }}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default GraphsPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAC1B,MAAMC,SAAS,GAAGD,KAAK,CAACE,QAAQ,CAACC,KAAK,CAACF,SAAS;EAChD,MAAMG,OAAO,GAAG,CACZ,cAAc,EAAE,YAAY,EAAE,MAAM,EAAE,UAAU,EAChD,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAC5C,WAAW,EAAE,WAAW,EAAE,gBAAgB,CAC7C;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBL,SAAS,CAACM,OAAO,CAACC,GAAG,IAAI;MACrB,MAAMC,SAAS,GAAGD,GAAG,CAAC,CAAC,CAAC;MACxB,IAAIC,SAAS,IAAI,CAACH,SAAS,CAACG,SAAS,CAAC,EAAE;QACpCH,SAAS,CAACG,SAAS,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACzC;IACJ,CAAC,CAAC;;IACF,OAAOJ,SAAS;EACpB,CAAC;EAED,MAAMA,SAAS,GAAGD,YAAY,CAAC,CAAC;EAEhC,oBACIP,OAAA;IAAAa,QAAA,EACKC,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC,CAACQ,GAAG,CAACL,SAAS,iBACjCX,OAAA;MAAAa,QAAA,gBACIb,OAAA;QAAAa,QAAA,EAAKF;MAAS;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBpB,OAAA,CAACF,IAAI;QACDuB,IAAI,EAAE;UACFC,MAAM,EAAEhB,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC;UACxBW,QAAQ,EAAE,CAAC;YACPC,KAAK,EAAEb,SAAS;YAChBU,IAAI,EAAEb,SAAS,CAACG,SAAS,CAAC;YAC1Bc,IAAI,EAAE,KAAK;YACXC,WAAW,EAAE,mBAAmB;YAChCC,OAAO,EAAE;UACb,CAAC;QACL;MAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA,GAbIT,SAAS;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcd,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACQ,EAAA,GA3CI3B,UAAU;AA6ChB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}